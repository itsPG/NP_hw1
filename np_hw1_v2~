#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <unistd.h>
#include <errno.h>
#include <wait.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <ctype.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <map>
#include <signal.h>
#define ROOT_DIC "/home/PG/PG/"
#define DEBUG 0
#define PIPEMAX 100000
string i2s(int q)
{
	ostringstream sout;
	sout << q;
	return sout.str();
}
class PG_pipe
{
public:
	
	map<string, int> pipe_read, pipe_write;
	map<string, int>::iterator iter;
	void apply(string q)
	{
		iter = pipe_read.find(q);
		if (iter != pipe_read.end())
		{
			dup2(iter->second,0);
		}
		iter = pipe_write.find(q);
		if (iter != pipe_write.end())
		{
			dup2(iter->second,1);
		}
	}
	void connect(string from, string to)
	{
		
	}
	
}
int main()
{
	
}
